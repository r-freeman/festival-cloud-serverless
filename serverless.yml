org: intellagent
app: festival-cloud
service: festival-cloud
useDotenv: true

frameworkVersion: '2'

custom:
  dynamodb:
    stages:
      - api
    start:
      port: 8000
      inMemory: false
      sharedDb: true
      dbPath: "./database"
      migrate: false
      seed: false
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: festivalsTable
            sources: [ ./seed/festivals.json ]
          - table: performersTable
            sources: [ ./seed/performers.json ]
          - table: stagesTable
            sources: [ ./seed/stages.json ]
          - table: showsTable
            sources: [ ./seed/shows.json ]

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  region: us-east-1
  stage: api
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:GetObject"
          Resource:
            - "arn:aws:s3:::${env:BUCKET}/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource:
            - ${env:AWS_DYNAMODB_FESTIVALS_TABLE_ARN}
            - ${env:AWS_DYNAMODB_PERFORMERS_TABLE_ARN}
            - ${env:AWS_DYNAMODB_STAGES_TABLE_ARN}
            - ${env:AWS_DYNAMODB_SHOWS_TABLE_ARN}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'image/png'
      - 'image/jpeg'
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${env:AWS_COGNITO_REGION}.amazonaws.com/${env:AWS_USER_POOL_ID}
        audience: ${env:AWS_USER_POOL_WEB_CLIENT_ID}

functions:
  festivals:
    handler: src/festivals.handler
    events:
      - http:
          path: /festivals
          method: post
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /festivals
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /festivals/{id}
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /festivals/{id}
          method: put
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /festivals/{id}
          method: delete
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true

  performers:
    handler: src/performers.handler
    events:
      - http:
          path: /performers
          method: post
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /performers
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /performers/{id}
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /performers/{id}
          method: put
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /performers/{id}
          method: delete
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true

  stages:
    handler: src/stages.handler
    events:
      - http:
          path: /stages
          method: post
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /stages
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /stages/{id}
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /stages/{id}
          method: put
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /stages/{id}
          method: delete
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true

  shows:
    handler: src/shows.handler
    events:
      - http:
          path: /shows
          method: post
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /shows
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
      - http:
          path: /shows/{id}
          method: get
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /shows/{id}
          method: put
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true
      - http:
          path: /shows/{id}
          method: delete
          cors: true
          authorizer:
            arn: ${env:AWS_USER_POOL_ARN}
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    StorageBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${env:BUCKET}
    StorageBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: ${env:BUCKET}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            Sid: "PublicReadForGetBucketObjects"
            Effect: "Allow"
            Resource: "arn:aws:s3:::${env:BUCKET}/*"
            Principal: "*"
            Action:
              - "s3:GetObject"